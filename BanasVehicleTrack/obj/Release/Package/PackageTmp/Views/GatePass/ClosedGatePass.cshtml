@model BanasVehicleTrackViewModel.GatePass.ViewStartGatePassViewModel@{ ViewBag.Title = "ClosedGatePass";                Layout = "~/Views/Shared/_Layout.cshtml";}<div class="page-header">    <div class="row align-items-end">        <div class="col-lg-12">            <div class="float-left">                <h3><i class="ti-control-forward ForwardIcon"> </i>@ViewBag.Type</h3>            </div>            <div class="float-right">            </div>        </div>    </div></div>@if (ViewBag.Type == "Closed GatePass"){    using (Html.BeginForm("ClosedGatePass", "GatePass", FormMethod.Post))    {@Html.AntiForgeryToken();foreach (var item in Model.BanasVehicleGatepassRetrieveList){@Html.HiddenFor(m => m.GatePassId)                        <div class="page-body">                            <div class="row justify-content-center">                                <div class="col-sm-6">                                    <!-- Basic Form Inputs card start -->                                    <div class="card">                                        <div class="card-header">                                            <div class="card-header-right">                                                @*<a class="btn btn-outline-primary" href="@Url.Action("ViewStartGatePassTEST", "Home")">                                                        <i class="fa fa-backward"></i>Back                                                    </a>*@                                            </div>                                        </div>                                        <div class="card-block">                                            <h4 class="sub-title">@ViewBag.Type</h4>                                            <div class="form-group row">                                                <label class="col-sm-6 col-form-label">Start Odometer</label>                                                <div class="col-sm-6">                                                    @Html.HiddenFor(m => m.StartOdometer)                                                    @Html.TextBoxFor(m => item.StartOdometer, new Dictionary<string, object>                                                                     {                                             {"id", "txtStartOdometer"},                                             {"class", "form-control"},                                             {"autocomplete", "off"},                                             {"readonly", ""}                                         })                                                </div>                                            </div>                                            <div class="form-group row">                                                <label class="col-sm-6 col-form-label">Close Odometer</label>                                                <div class="col-sm-6">                                                    @Html.TextBoxFor(m => m.CloseOdometer, new Dictionary<string, object>                                      () {                                            {"id","txtCloseOdometer"},                                            {"class","form-control numberonly"},                                            {"autocomplete","off"},                                           {"required","required"},                                            })                                                    @Html.ValidationMessageFor(m => m.CloseOdometer, "", new { @class = "text-danger" })                                                    <span class="text-danger vd" hidden>CloseOdometer should be greater than StartOdometer</span>                                                </div>                                            </div>                                            <div class="form-group row">                                                <label class="col-sm-6 col-form-label">Difference</label>                                                <div class="col-sm-6">                                                    @Html.TextBoxFor(m => m.Difference, new Dictionary<string, object>                                       () {                                                 {"id","txtDifference"},                                                 {"class","form-control"},                                                 {"autocomplete","off"},                                                  {"readonly",""}                                                 })                                                </div>                                            </div>                                            <div class="form-group row">                                                <label class="col-sm-6 col-form-label">Select Date and Time</label>                                                <div class="col-sm-6">                                                    @Html.TextBoxFor(m => m.CloseDateTime, new Dictionary<string, object>                                     () {                                               {"id","txtdateTime"},                                               {"class","form-control FutureDisabledatetimepicker"},                                               {"autocomplete","off"},                                                  {"required","required"},                                               })                                                    @Html.ValidationMessageFor(m => m.CloseDateTime, "", new { @class = "text-danger" })                                                </div>                                            </div>                                            <div class="form-group row">                                                <label class="col-sm-6 col-form-label">Remarks</label>                                                <div class="col-sm-6">                                                    @Html.TextBoxFor(m => m.CloseRemark, new Dictionary<string, object>                                      () {                                              {"id","txtRemarks"},                                              {"class","form-control"},                                              {"autocomplete","off"},                                       {"maxlength","150" }                                              })                                                </div>                                            </div>                                            <div class="form-group row justify-content-center">                                                <input type="submit" class="btn btn-round btn-inverse m-2" id="confirmok" value="Generate" />                                                <a class="btn btn-round btn-inverse m-2" href="@Url.Action("ViewGatePass", "GatePass")">Cancel</a>                                            </div>                                        </div>                                    </div>                                </div>                            </div>                        </div>}                                        }                                    }                    @if (ViewBag.Type == "Net GatePass")                    {                        using (Html.BeginForm("ClosedGatePass", "GatePass", FormMethod.Post))                        {                    @Html.AntiForgeryToken();                    foreach (var item in Model.BanasVehicleGatepassRetrieveList)                    {                    @Html.HiddenFor(m => m.GatePassId)                            <div class="page-body">                                <div class="row justify-content-center">                                <div class="col-sm-6">                                    <!-- Basic Form Inputs card start -->                                    <div class="card">                                        <div class="card-header">                                            <div class="card-header-right">                                                @*<a class="btn btn-outline-primary" href="@Url.Action("ViewStartGatePassTEST", "Home")">                                                        <i class="fa fa-backward"></i>Back                                                    </a>*@                                            </div>                                        </div>                                        <div class="card-block">                                            <h4 class="sub-title">@ViewBag.Type</h4>                                            <div class="form-group row">                                                <label class="col-sm-6 col-form-label">Start Odometer</label>                                                <div class="col-sm-6">                                                    @Html.HiddenFor(m => m.StartOdometer)                                                    @Html.TextBoxFor(m => item.StartOdometer, new Dictionary<string, object>                                                   () {                                                     {"id","txtStartOdometer2"},                                                     {"class","form-control"},                                                     {"autocomplete","off"},                                                     {"readonly",""}                                                     })                                                </div>                                            </div>                                            <div class="form-group row">                                                <label class="col-sm-6 col-form-label">Net KM</label>                                                <div class="col-sm-6">                                                    @Html.TextBoxFor(m => m.Netkm, new Dictionary<string, object>                                           () {                                                 {"id","txtNetkm2"},                                                 {"class","form-control"},                                                 {"autocomplete","off"},                                                 {"type","number"},                                                     {"required","required"},                                                 })                                                    @Html.ValidationMessageFor(m => m.Netkm, "", new { @class = "text-danger" })                                                </div>                                            </div>                                            <div class="form-group row">                                                <label class="col-sm-6 col-form-label">Select Date and Time</label>                                                <div class="col-sm-6">                                                    @Html.TextBoxFor(m => m.CloseDateTime, new Dictionary<string, object>                                          () {                                              {"id","txCloseDateTime2"},                                              {"class","form-control FutureDisabledatepicker"},                                              {"autocomplete","off"},                                                  {"required","required"},                                              })                                                    @Html.ValidationMessageFor(m => m.CloseDateTime, "", new { @class = "text-danger" })                                                </div>                                            </div>                                            <div class="form-group row">                                                <label class="col-sm-6 col-form-label">Remarks</label>                                                <div class="col-sm-6">                                                    @Html.TextBoxFor(m => m.CloseRemark, new Dictionary<string, object>                                      () {                                            {"id","txtRemarks2"},                                            {"class","form-control"},                                            {"autocomplete","off"},                                            {"maxlength","150" }                                              })                                                </div>                                            </div>                                            <div class="form-group row justify-content-center">                                                <input type="submit" class="btn btn-round btn-inverse m-2" id="confirmok2" value="Generate" />                                                <a class="btn btn-round btn-inverse m-2" href="@Url.Action("ViewGatePass", "GatePass")">Cancel</a>                                            </div>                                        </div>                                    </div>                                </div>                            </div>                        </div>}                                        }                                    }<script>    $(document).ready(function () {        debugger        $('#txtCloseOdometer').on('input', function () {            var startOdometer = parseInt($('#txtStartOdometer').val()) || 0;            var closeOdometer = parseInt($(this).val()) || 0;            var difference = closeOdometer - startOdometer;            $('#txtDifference').val(difference);            if (closeOdometer > startOdometer) {                $('#txtDifference').val(difference);                $(".vd").attr("hidden", true);            } else {                $('#txtDifference').val('Invalid');                $(".vd").removeAttr("hidden");            }        });    });    $('#confirmok').click(function () {        debugger        var startOdometer = parseInt($('#txtStartOdometer').val()) || 0;        var closeOdometer = parseInt($('#txtCloseOdometer').val()) || 0;        //  var txCloseDateTime = $('#txCloseDateTime').val();        // var txtRemarks = parseInt($('#txtRemarks').val());        if (closeOdometer > startOdometer) {            $('#txtDifference').val(difference);            return true;        }        //else if (txCloseDateTime == null) {        //    var result = "<div class='alert alert-success background-danger'>" + "Date and Time Required" + "</div>"        //    $(".msg").html(result);        //    window.setTimeout(function () {        //        $(".alert").fadeTo(2000, 0).slideUp(2000, function () {        //            $(this).remove();        //        });        //    }, 8000);        //    return false;        //}        //else {        //    var result = "<div class='alert alert-success background-danger'>" + "Close Odometer Required and should be greater than Start Odometer" + "</div>"        //    $(".msg").html(result);        //    window.setTimeout(function () {        //        $(".alert").fadeTo(2000, 0).slideUp(2000, function () {        //            $(this).remove();        //        });        //    }, 8000);        //    return false;        //}    });    $('#confirmok2').click(function () {        debugger        var startOdometer = parseInt($('#txtStartOdometer2').val()) || 0;        var txCloseDateTime = parseInt($('#txCloseDateTime2').val());        // var txtRemarks = parseInt($('#txtRemarks2').val());        // var txtNetkm = parseInt($('#txtNetkm2').val());        if (closeOdometer > startOdometer) {            $('#txtDifference2').val(difference);            return true;        }        //else if (txtRemarks == null || txCloseDateTime == null || txtNetkm == null) {        //    var result = "<div class='alert alert-success background-danger'>" + "Required" + "</div>"        //    $(".msg").html(result);        //    window.setTimeout(function () {        //        $(".alert").fadeTo(2000, 0).slideUp(2000, function () {        //            $(this).remove();        //        });        //    }, 8000);        //    return false;        //}        //else {        //    var result = "<div class='alert alert-success background-danger'>" + "Close Odometer should be greater than Start Odometer" + "</div>"        //    $(".msg").html(result);        //    window.setTimeout(function () {        //        $(".alert").fadeTo(2000, 0).slideUp(2000, function () {        //            $(this).remove();        //        });        //    }, 8000);        //    return false;        //}    });</script>